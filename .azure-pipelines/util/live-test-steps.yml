parameters:
- name: name
- name: vmImage
- name: psVersion
- name: dotnetVersion

jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 180
  pool:
    vmImage: ${{ parameters.vmImage }}

  steps:
  - task: UseDotNet@2
    condition: ne('${{ parameters.dotnetVersion }}', '')
    displayName: Install desired .NET version ${{ parameters.dotnetVersion }}
    inputs:
      packageType: sdk
      version: ${{ parameters.dotnetVersion }}

  - task: PowerShell@2
    displayName: Install desired Powershell version ${{ parameters.psVersion }}
    inputs:
      pwsh: true
      targetType: filePath
      filePath: ./tools/TestFx/Live/InitializeLiveTestEnvironment.ps1
      arguments: -DesiredVersion ${{ parameters.psVersion }}

  - task: DownloadPipelineArtifact@2
    condition: and(succeeded(), eq(variables['GalleryName'], 'LocalRepo'), eq(variables['BuildPipelineBuildId'], ''))
    displayName: Download latest artifacts from build pipeline main branch
    inputs:
      buildType: specific
      project: $(ProjectToDownloadArtifacts)
      definition: $(BuildPipelineDefinitionId)
      buildVersionToDownload: latestFromBranch
      branchName: refs/heads/master
      artifactName: $(ArtifactName)
      targetPath: $(Pipeline.Workspace)

  - task: DownloadPipelineArtifact@2
    condition: and(succeeded(), eq(variables['GalleryName'], 'LocalRepo'), ne(variables['BuildPipelineBuildId'], ''))
    displayName: Download specific artifacts from build pipeline
    inputs:
      buildType: specific
      project: $(ProjectToDownloadArtifacts)
      definition: $(BuildPipelineDefinitionId)
      buildVersionToDownload: specific
      pipelineId: $(BuildPipelineBuildId)
      artifactName: $(ArtifactName)
      targetPath: $(Pipeline.Workspace)

  - task: PowerShell@2
    condition: and(succeeded(), eq(variables['GalleryName'], 'LocalRepo'))
    displayName: Copy artifacts to local repository
    inputs:
      pwsh: true
      targetType: inline
      script: |
        New-Item -Path $(Pipeline.Workspace) -Name LocalRepo -ItemType Directory
        $localRepoPath = Join-Path -Path $(Pipeline.Workspace) -ChildPath LocalRepo
        Move-Item -Path (Join-Path -Path $(Pipeline.Workspace) -ChildPath *.nupkg) -Destination $localRepoPath
        Get-ChildItem -LiteralPath $localRepoPath

  - task: PowerShell@2
    displayName: Install desired Az module from $(GalleryName)
    inputs:
      pwsh: true
      targetType: filePath
      filePath: ./tools/TestFx/Live/InvokeLiveTestCITask.ps1
      arguments: -UseWindowsPowerShell ('${{ parameters.psVersion }}' -eq '5.1') -ScriptFile './tools/TestFx/Live/InstallLiveTestAzModule.ps1 -Source $(GalleryName) -RepoLocation (Join-Path -Path $(Pipeline.Workspace) -ChildPath LocalRepo)'

  - task: PowerShell@2
    displayName: Connect Azure with service principal credential
    inputs:
      pwsh: true
      targetType: filePath
      filePath: ./tools/TestFx/Live/InvokeLiveTestCITask.ps1
      arguments: -UseWindowsPowerShell ('${{ parameters.psVersion }}' -eq '5.1') -ScriptFile './tools/TestFx/Live/ConnectLiveTestServicePrincipal.ps1 $(LiveTestServicePrincipalSubscriptionId) $(LiveTestServicePrincipalTenantId) $(LiveTestServicePrincipalId) $(LiveTestServicePrincipalSecret)'

  - task: PowerShell@2
    displayName: Run top E2E live scenarios
    inputs:
      pwsh: true
      targetType: filePath
      filePath: ./tools/TestFx/Live/InvokeLiveTestCITask.ps1
      arguments: -UseWindowsPowerShell ('${{ parameters.psVersion }}' -eq '5.1') -ScriptFile './tools/TestFx/Live/InvokeLiveTestScenarios.ps1 $(Build.BuildId) ${{ parameters.vmImage }} ${{ parameters.psVersion }} $(Build.SourcesDirectory) $(LiveTestLocation)'
      failOnStderr: true

  - task: PowerShell@2
    displayName: Save live test results to Kusto
    inputs:
      pwsh: true
      targetType: filePath
      filePath: ./tools/TestFx/Live/SaveLiveTestResult.ps1
      arguments: $(KustoServicePrincipalTenantId) $(KustoServicePrincipalId) $(KustoServicePrincipalSecret) $(KustoClusterName) $(KustoClusterRegion) $(LiveTestDatabaseName) $(LiveTestTableName) $(TestCoverageTableName) $(LiveTestLocation) $(TestCoverageLocation)

  - task: PublishPipelineArtifact@1
    displayName: Publish live test results to pipeline artifact
    inputs:
      artifact: livetest-os-${{ parameters.vmImage }}-powershell-${{ parameters.psVersion }}
      targetPath: $(Pipeline.Workspace)
    condition: always()
